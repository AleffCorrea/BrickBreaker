Scrapbook and Changelog

03/11
-A state machine interpreter was made, now we can "script" stuff like delays and ppu writes cleanly for each global game state. It even has a stack to store stuff! While the stack is being used in an interesting way to schedule PPU writes (that are written only when there's a DrawRLE opcode, 1 opcode per scheduled write), it is quite limited since the opcode subroutine can send only one writing job for the NMI interrupt subroutine, that is, only one type of PPU write per frame. A better solution would have the NMI manipulating the interpreter stack directly, writing bytes to the ppu up to a fixed limit each frame.

-A byte repeat routine was made to write a tile for # times on the PPU. The intro state machine has partial code for a spiral, this is intended to simulate a screen transition. Ideally there will be an opcode responsible to do pretty screen transitions that tells the PPU to draw one of the many possible transitions, but that's for later.

28/11
-The collision detection routine behaves "strangely" but that might be caused by the object update order. Ideally this would be solved by running the projectiles first, then running the objects that check collisions against them (the main character's parasol). The "strange" behaviour is 1-frame delay that sometimes happen between a hit and its reaction.

-Collision is also off by one on edge checks (being side by side, 1px distance triggers overlap. This shouldn't happen)

-I need to remember to tighten the collision boxes, the current values have empty space in them which feels odd. The parasol's collision detection might need a special collision routine though.

**Investigate collision routine**

Changelog:

28/11
+Code restructuring
+Random Number Generation
+Collision Detection Fix
+New objects
+Framework for game states
+Title screen partially done
+And more

03/12
+Drawing routine for state machine, NMI subroutine

11/01
+Code restructuring AGAIN (Created second state machine responsible for VBlank writes)

12/01
+Code for drawing from the NMI done.

19/01
So much work done!
+Untested collision map and tile overlap routines
+Revamped NMI Queue command machine, fixed bugs
	(some commands may suggest an immediate step in the same vblank (ie multiple commands "at once")!)
+Debug game state to edit a collision map made
+Metatile file created
+Checkerboard cursor object (metasprite) added
+Untested Metatile drawing routine created

-Next step: create code in debug gamestate to build collision map with joystick
			add another debug gamestate to test bounding box to metatile collisions
			
~13 days to go~

20/01
+The BG-AABB bounding box overlap code is verified to be correct.
+Metatile drawing routines corrected and in use.
+Some code used to test collisions was done, to positive results.
+Metasprite reference file (metasprite.msp) file updated to reflect the order in anim.txt
+Yet another RTS trick subroutine added, this time to switch between game states.
+Collision map size changed to cover whole screen (16 x 15 size four metatiles)

+Testing sprite-to-bg collisions highlighted what was problem with collision bounding boxes, the x2,y2 points are all off by one. Mystery solved and boxes fixed.

+Movement faster than 1px needs to calculate position so that the metasprite "touches" the solid tile, not a pixel more, not a pixel less. Done inside the bg overlap routine, stored in COLLISION_OVERLAP!

-Next step: Create logic to reflect balls when touching walls;
			Create a basic enemy object with AI
			Create a match game state to make this look like a game already
			
11 days left! ! ! ! ! ! ! ! ! ! ! ! ! ! 

21/01
+Reflection when colliding with BG done
+High score table and related functions done.

-A string draw function with length as a parameter would been nice.
-We need at least a PPU attribute upload function...

10 days left.

22/02
+String draw functionality done!
+Game screen redesigned
+Instructions written
+Skeleton for match game state done

23/01
+State machine opcode for writing a value at a ram address added for sync.
+Fixed bug in DEC16 macro that made the State_Interpreter fail depending on the phase of the moon (if the initial state machine address' low byte was exactly 00 it would fail to account for the underflow.)
+Added instructional game state
+Added coherent state transitions, now title screen cycles between itself and the high score table until start is pressed.

+When the level value is 0, go to instruction state. The instrction state will then go back to the match state after it's done, setting the level value to 1.
	A gameover will set the level value to 1 so it doesn't repeat the instruction screen until the game is reset.
	The level value must persist (ie not be reset) during state changes.
	
+FamiTone2 audio library integrated into the project.
+A bunch of Public Domain released famitracker files were converted from VRC6 to a normal NES audio project to be used in the game.

9 days left...

24/01
+Routine to write 8x16 numbers written.
+A good portion of logic to the match gamestate was added.
+Each enemy has a different collision layout, therefore the match state now reads it from a table indexed by the match #.
+Restructured ball collision code to make it behave differently for each type of tile.
+Brick tiles can now be broken, goal tiles increase score buffer.
+Added colored post-it strips on my laptop screen to indicate how many days are left :P

-todo: match state has to check score buffer and add to the score each frame then update ppu if needed.
-Todo: one state machine per match to draw different bios; or
		state machine opcodes to read from a table address and perform operations with indirect addressing; or
		another separated state dedicated to writing character bios on screen before matches.
		
8 days left...

25/01

+Implemented player object and an umbrella attachment object with heightmapped collision detection against balls.
+Collision map now dedicates 3 highest bits to store "durability", ie # of hits to break.

-Note: sprite collision detection loops were created with the assumption that we needed to check for collisions only on objects after the one we're checking against. Remember to fix this later.
-Todo: actually use the durability bits in the ball's collision routine

7 days left.!.

26/01

+Fought this horrible bug that was causing wrong ejection in the Y axis. Turns out it wasn't working at all for bricks on the Y direction, and to discover that it was caused by jumping to wrong labels took a whole day. NOTE TO SELF: WHEN MODIFYING THE BALL COLLISION ROUTINE, CHECK THE PROGRAM FLOW THROUGHLY
Hilariously enough, this bug survived into the last commit without me noticing. :X

***Metatile to Sprite overlap routine might be slightly off. It's hard to analyze it but I need to confirm if it's working properly.
	one thing that bothers me is that sometimes the hit with the solidifier dotted line will be registered, sometimes not. I have the impression that it was working ALWAYS on two pushes ago but I'm not sure if the SOLID property was implemented yet.
	Otherwise it's correct since the center of the object spawned is already outside the line, and it first moves and then checks for tile collisions (so any speed >=2 in the Y axis will make the ball "escape" from the dotted line and not solidify).
	+EDIT: Checked, two commits ago the ball always seemed to be solid simply because the SOLID property wasn't defined and/or verified yet. Mystery solved.
	
+Ball starting point moved 8px up on debug state to rectify problem highlighted in above note.

-Investigate if the DamageTile routine is working correctly in relation to # of damage dealt.

6, actually 5 days left since I was counting the submission date.

27/01

+fixed a bug where a collision would deal double damage to the tile if both edge points were overlapping it.

-Umbrella/paddle collision doesn't work because it requires actual angles and we don't simulate that at all, instead of just setting the X speed we need to actually calculate the x/y vectors for the angles properly and add that into a table.
-For the above we'll also need a MUL table.
-Started work on a Lookup Table for 30, 45 and 60 degrees movement with speeds (vector length) 1 to 8 to aid in proper angle movement for the balls. Need to rewrite parts of OBJ_BALL to work with it, and possibly the reflect function (if comparing the new and old positions for determining direction is unreliable)

4 days left... hoping for a deadline pushback on NESDev (right now it's 9 votes for pushing the submission date back vs 4).

28/01

+True 30,45,60 degree angle movement with subpixel precision for balls implemented.

-...but there's a problem when the ball speed is equal to 1. Might be related to how the program always thinks a number is positive if its integer part is equal to zero (since only the integer part is signed). There's a fix that considers zero as a special case in Ball_MoveX/Y but if the problem is there it probably doesn't work. Check all subroutines that use the displacement values to figure out direction through +/- check (BMI/BPL).

29/01

+Angle movement bug fixed and now 100% reliable! Turns out there was a confusion on branching in both _OBJ_Ball and Ball_ReflectY when trying to figure out if the ball was going up or down due to the fact that the Y axis is flipped on the NES (Y increases when closer to the BOTTOM of the screen, not the top).

+Umbrella collision fixed for new vector system and also 100% functional.

30/01

-the deadline did not get extended... 

****************new branch made for changes to a severely downgraded NESDev build made.***************
+Removed some code that is not going to be used
+Removed function to upload top of playfield, replaced with one that uploads WHOLE playfield
+Art updated
+Match game state now actually resembles a game state
+"Launcher" object attachment to the umbrella added, reads controller and transforms itself into a ball when B is pressed and released, shows aim reticle when B is being held
+Music added

-Launcher attaches to player head and not umbrella, ObjectList_Insert returns umbrella id instead of player id when inserting

1 day left

31/01

+Launcher positioning bug fix... it turns out that I forgot to preserve X upon exit from the player init subroutine, and that's expected from all init routines. Some changes were also made in the launcher subroutine and the match gamestate too.

+Match now draws level # on screen.

+Definitive music change made to a tune that actually fits in the game. Sound effects created.

+Match now keeps score, draws score when updated. Ball object increases buffer for score when a brick object is destroyed.
+Match keeps track of number of balls and lives. Ball object decreases ball counter when destroyed.
+Match now has a counter with number of bricks destroyed and calculates how many bricks are in total in a level when starting up.
+Time up state added, returns to match if number of balls-1 is not zero, else transitions to gameover state. Match also draws number of balls.
+Gameover state placeholder added, for now it only goes to titlescreen, but it should ask if the player wants to continue depending of the # of lives.
+Player now can boost movement speed by holding B. Button A is how you launch balls. Instruction text changed to reflect these changes.
+Fixed direction changes form the reticle. Fixed tile damage. Music now stops when state changes.
+Match now draws number of credits.

+Title screen now uploads own collision map.


24/02
+Hello NesDev! This is now licensed under MIT License.
-I was ranked 13th (out of 18 entries) and lost to a non-game, even. RIP!

+Updated umbrella/ball collision threshold. Now controlling the ball's direction is less annoying/buggy, game is way more responsive.

+Game title changed, and of course there's changes in art to reflect it.
+Converted to NROM-128 for multicart inclusion.

-There's a bug related to the OAM Upload routine during the instruction screen, and adding three NOPs where the Drawscanline jsr would be makes it get stuck on an infinite loop on OAM upload. Remove the NOPs and it merely "hides" the sprite. Using the same combination of metasprites in other situations doesn't show those symptoms, what could it be? And how did it stay hidden for so long?
+++++ In INSERT3 (instructions.asm) I was using an invalid ID (ball shadow off by one, 16 instead of 15) and that's the reason for the OAM routine to get confused. There seems to be more than it meets the eye (why moving the OAM routine three bytes changed how the bug worked so drastically?) but I can't find it if it exists. I'm considering this fixed but it's good to keep an eye on any weird sprite behaviour.
