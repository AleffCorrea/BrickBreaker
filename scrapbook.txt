Scrapbook and Changelog

03/11
-A state machine interpreter was made, now we can "script" stuff like delays and ppu writes cleanly for each global game state. It even has a stack to store stuff! While the stack is being used in an interesting way to schedule PPU writes (that are written only when there's a DrawRLE opcode, 1 opcode per scheduled write), it is quite limited since the opcode subroutine can send only one writing job for the NMI interrupt subroutine, that is, only one type of PPU write per frame. A better solution would have the NMI manipulating the interpreter stack directly, writing bytes to the ppu up to a fixed limit each frame.

-A byte repeat routine was made to write a tile for # times on the PPU. The intro state machine has partial code for a spiral, this is intended to simulate a screen transition. Ideally there will be an opcode responsible to do pretty screen transitions that tells the PPU to draw one of the many possible transitions, but that's for later.

28/11
-The collision detection routine behaves "strangely" but that might be caused by the object update order. Ideally this would be solved by running the projectiles first, then running the objects that check collisions against them (the main character's parasol). The "strange" behaviour is 1-frame delay that sometimes happen between a hit and its reaction.

-Collision is also off by one on edge checks (being side by side, 1px distance triggers overlap. This shouldn't happen)

-I need to remember to tighten the collision boxes, the current values have empty space in them which feels odd. The parasol's collision detection might need a special collision routine though.

**Investigate collision routine**

Changelog:

28/11
+Code restructuring
+Random Number Generation
+Collision Detection Fix
+New objects
+Framework for game states
+Title screen partially done
+And more

03/12
+Drawing routine for state machine, NMI subroutine

11/01
+Code restructuring AGAIN (Created second state machine responsible for VBlank writes)

12/01
+Code for drawing from the NMI done.

19/01
So much work done!
+Untested collision map and tile overlap routines
+Revamped NMI Queue command machine, fixed bugs
	(some commands may suggest an immediate step in the same vblank (ie multiple commands "at once")!)
+Debug game state to edit a collision map made
+Metatile file created
+Checkerboard cursor object (metasprite) added
+Untested Metatile drawing routine created

-Next step: create code in debug gamestate to build collision map with joystick
			add another debug gamestate to test bounding box to metatile collisions
			
~13 days to go~

20/01
+The BG-AABB bounding box overlap code is verified to be correct.
+Metatile drawing routines corrected and in use.
+Some code used to test collisions was done, to positive results.
+Metasprite reference file (metasprite.msp) file updated to reflect the order in anim.txt
+Yet another RTS trick subroutine added, this time to switch between game states.
+Collision map size changed to cover whole screen (16 x 15 size four metatiles)

+Testing sprite-to-bg collisions highlighted what was problem with collision bounding boxes, the x2,y2 points are all off by one. Mystery solved and boxes fixed.

+Movement faster than 1px needs to calculate position so that the metasprite "touches" the solid tile, not a pixel more, not a pixel less. Done inside the bg overlap routine, stored in COLLISION_OVERLAP!

-Next step: Create logic to reflect balls when touching walls;
			Create a basic enemy object with AI
			Create a match game state to make this look like a game already
			
11 days left! ! ! ! ! ! ! ! ! ! ! ! ! ! 

21/01
+Reflection when colliding with BG done
+High score table and related functions done.

-A string draw function with length as a parameter would been nice.
-We need at least a PPU attribute upload function...

10 days left.